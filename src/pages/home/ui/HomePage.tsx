import { useCallback, useEffect, useState } from 'react';
import cn from 'classnames';
import { Loader } from '@/shared/ui';
import { apiGetUsers } from '../api';
import type { User } from '../model';
import { Header } from './Header';
import { Table } from './Table';
import styles from './HomePage.module.scss';

type StatusApi = 'initial' | 'loading' | 'success' | 'error';

interface HomePageProps {
  className?: string;
}

export function HomePage({ className }: Readonly<HomePageProps>) {
  const [users, setUsers] = useState<User[]>([]);
  const [statusApi, setStatusApi] = useState<StatusApi>('initial');

  // –û—Å–Ω–æ–≤–Ω–∞—è –º–æ—è –∏–¥–µ—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
  async function loadUsers() {
    setStatusApi('loading');

    try {
      const newUsers = await apiGetUsers();
      for (const newUser of newUsers) {
        // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        await new Promise<void>(resolve => {
          setTimeout(() => {
            resolve();
          }, 300);
        });
        setUsers(prev => [...prev, newUser]);
      }
      setStatusApi('success');
    } catch (error) {
      setStatusApi('error');
      console.error(error);
    }
  }

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  if (statusApi === 'initial') {
    console.log('Loading initial users');
    loadUsers();
  }

  // –ó–∞–ø–æ–º–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö
  const checkLoading = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ª–∏–º–∏—Ç
    if (statusApi !== 'loading' && users.length < 100) {
      console.log('Loading next users');
      loadUsers();
    }
  }, [statusApi, users.length]);

  // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  useEffect(() => {
    function handleScroll() {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight) {
        checkLoading();
      }
    }
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [checkLoading]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–æ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –Ω–µ–ø–æ–ª–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  // –°—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ body –¥–æ–∫—É–º–µ–Ω—Ç–∞ –º–µ–Ω—å—à–µ —á–µ–º –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
  useEffect(() => {
    if (window.innerHeight > document.body.scrollHeight) {
      checkLoading();
    }
  }, [checkLoading]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è render prop
  function renderUserRow(user: User, index: number) {
    return <Table.Row key={user.id} user={user} number={index + 1} />;
  }

  return (
    <div className={cn(styles.homePage, className)}>
      <Header />

      <main>
        <Table columns="50px 1fr 1fr">
          <Table.Heading>
            <span>N</span>
            <span>Name</span>
            <span>Surname</span>
          </Table.Heading>
          <Table.Body data={users} render={renderUserRow} />

          {statusApi === 'error' && (
            <span className={styles.homePage__error}>Error loading users... Try reload page. ü§î</span>
          )}
        </Table>

        {statusApi === 'loading' && <Loader className={styles.homePage__loader} />}
      </main>
    </div>
  );
}
